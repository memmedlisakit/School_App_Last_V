<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Rackspace.Threading</name>
  </assembly>
  <members>
    <member name="T:Rackspace.Threading.CancellationTokenSourceExtensions">
      <summary>
            Provides extension methods for the <see cref="T:System.Threading.CancellationTokenSource" /> class.
            </summary>
    </member>
    <member name="M:Rackspace.Threading.CancellationTokenSourceExtensions.CancelAfter(System.Threading.CancellationTokenSource,System.TimeSpan)">
      <summary>
            Schedules a <see cref="M:System.Threading.CancellationTokenSource.Cancel" /> operation on a <see cref="T:System.Threading.CancellationTokenSource" />
            after the specified time span.
            </summary>
      <param name="cts">The <see cref="T:System.Threading.CancellationTokenSource" /> to cancel after a delay.</param>
      <param name="delay">The time span to wait before canceling the <see cref="T:System.Threading.CancellationTokenSource" />.</param>
      <exception cref="T:System.ArgumentNullException">If <paramref name="cts" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">If <paramref name="cts" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If the <see cref="P:System.TimeSpan.TotalMilliseconds" /> property of <paramref name="delay" /> is less than -1 or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="T:Rackspace.Threading.CompletedTask">
      <summary>
            Provides static methods to create completed <see cref="T:System.Threading.Tasks.Task" /> and <see cref="T:System.Threading.Tasks.Task`1" /> instances.
            </summary>
    </member>
    <member name="M:Rackspace.Threading.CompletedTask.Canceled">
      <summary>
            Gets a canceled <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
      <returns>A canceled <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:Rackspace.Threading.CompletedTask.Canceled``1">
      <summary>
            Gets a canceled <see cref="T:System.Threading.Tasks.Task`1" />.
            </summary>
      <typeparam name="TResult">The task result type.</typeparam>
      <returns>A canceled <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
    </member>
    <member name="P:Rackspace.Threading.CompletedTask.Default">
      <summary>
            Gets a completed <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
    </member>
    <member name="M:Rackspace.Threading.CompletedTask.FromResult``1(``0)">
      <summary>
            Gets a completed <see cref="T:System.Threading.Tasks.Task`1" /> with the specified result.
            </summary>
      <param name="result">The result of the completed task.</param>
      <typeparam name="TResult">The task result type.</typeparam>
      <returns>A completed <see cref="T:System.Threading.Tasks.Task`1" />, whose <see cref="P:System.Threading.Tasks.Task`1.Result" /> property returns the specified <paramref name="result" />.</returns>
    </member>
    <member name="T:Rackspace.Threading.CoreTaskExtensions">
      <summary>
            Provides extension methods for efficiently creating <see cref="T:System.Threading.Tasks.Task" /> continuations,
            with automatic handling of faulted and canceled antecedent tasks.
            </summary>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Catch``1(System.Threading.Tasks.Task,System.Action{System.Threading.Tasks.Task,``0})">
      <summary>
             Synchronously execute an exception handling continuation when a task completes in the
             <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> or <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state. If the
             antecedent task completes successfully, or if the <see cref="P:System.Threading.Tasks.Task.Exception" /> it
             provides is not a <typeparamref name="TException" /> wrapped in an
             <see cref="T:System.AggregateException" />, the status of the antecedent is directly applied to
             the task returned by this method. Otherwise, the status of the cleanup operation is
             directly applied to the task returned by this method.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="handler">The exception handler continuation action to execute when <paramref name="task" /> completes with an exception of type <typeparamref name="TException" />.</param>
      <typeparam name="TException">The type of exception which is handled by <paramref name="handler" />.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="handler" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Catch``1(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task,``0,System.Threading.Tasks.Task})">
      <summary>
             Execute an exception handling continuation when a task completes in the
             <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> or <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state. If the
             antecedent task completes successfully, or if the <see cref="P:System.Threading.Tasks.Task.Exception" /> it
             provides is not a <typeparamref name="TException" /> wrapped in an
             <see cref="T:System.AggregateException" />, the status of the antecedent is directly applied to
             the task returned by this method. Otherwise, the status of the cleanup operation is
             directly applied to the task returned by this method.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="handler">The exception handler continuation function to execute when <paramref name="task" /> completes with an exception of type <typeparamref name="TException" />.</param>
      <typeparam name="TException">The type of exception which is handled by <paramref name="handler" />.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="handler" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Catch``2(System.Threading.Tasks.Task{``1},System.Func{System.Threading.Tasks.Task{``1},``0,System.Threading.Tasks.Task{``1}})">
      <summary>
             Execute an exception handling continuation when a task completes in the
             <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> or <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state. If the
             antecedent task completes successfully, or if the <see cref="P:System.Threading.Tasks.Task.Exception" /> it
             provides is not a <typeparamref name="TException" /> wrapped in an
             <see cref="T:System.AggregateException" />, the status of the antecedent is directly applied to
             the task returned by this method. Otherwise, the status of the cleanup operation is
             directly applied to the task returned by this method.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="handler">The exception handler continuation function to execute when <paramref name="task" /> completes with an exception of type <typeparamref name="TException" />.</param>
      <typeparam name="TException">The type of exception which is handled by <paramref name="handler" />.</typeparam>
      <typeparam name="TResult">The result type of the antecedent <paramref name="task" />.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. When the task completes successfully,
             the <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will contain the result returned from the <paramref name="task" />
             if it completed successfully, or the result of <paramref name="handler" /> if it resulted in an error condition
             which was handled.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="handler" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Catch``2(System.Threading.Tasks.Task{``1},System.Func{System.Threading.Tasks.Task{``1},``0,``1})">
      <summary>
             Synchronously execute an exception handling continuation when a task completes in the
             <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> or <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state. If the
             antecedent task completes successfully, or if the <see cref="P:System.Threading.Tasks.Task.Exception" /> it
             provides is not a <typeparamref name="TException" /> wrapped in an
             <see cref="T:System.AggregateException" />, the status of the antecedent is directly applied to
             the task returned by this method. Otherwise, the status of the cleanup operation is
             directly applied to the task returned by this method.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="handler">The exception handler continuation function to execute when <paramref name="task" /> completes with an exception of type <typeparamref name="TException" />.</param>
      <typeparam name="TException">The type of exception which is handled by <paramref name="handler" />.</typeparam>
      <typeparam name="TResult">The result type of the antecedent <paramref name="task" />.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. When the task completes successfully,
             the <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will contain the result returned from the <paramref name="task" />
             if it completed successfully, or the result of <paramref name="handler" /> if it resulted in an error condition
             which was handled.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="handler" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Finally(System.Threading.Tasks.Task,System.Action{System.Threading.Tasks.Task})">
      <summary>
             Synchronously execute a cleanup continuation when a task completes, regardless of the
             final <see cref="P:System.Threading.Tasks.Task.Status" /> of the task. If the cleanup action completes
             successfully, the status of the antecedent is directly applied to the task returned by
             this method. Otherwise, the status of the faulted or canceled cleanup operation is
             directly applied to the task returned by this method.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="cleanupAction">The cleanup continuation function to execute when <paramref name="task" /> completes.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="cleanupAction" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Finally(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task,System.Threading.Tasks.Task})">
      <summary>
             Execute a cleanup continuation task when a task completes, regardless of the final
             <see cref="P:System.Threading.Tasks.Task.Status" /> of the antecedent task. If the cleanup action completes
             successfully, the status of the antecedent is directly applied to the task returned by
             this method. Otherwise, the status of the faulted or canceled cleanup operation is
             directly applied to the task returned by this method.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="cleanupFunction">The continuation function to execute when <paramref name="task" /> completes. The continuation function returns a <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous cleanup operation.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="cleanupFunction" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Finally``1(System.Threading.Tasks.Task{``0},System.Action{System.Threading.Tasks.Task{``0}})">
      <summary>
             Synchronously execute a cleanup continuation when a task completes, regardless of the
             final <see cref="P:System.Threading.Tasks.Task.Status" /> of the task. If the cleanup action completes
             successfully, the status of the antecedent is directly applied to the task returned by
             this method. Otherwise, the status of the faulted or canceled cleanup operation is
             directly applied to the task returned by this method.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="cleanupAction">The cleanup continuation function to execute when <paramref name="task" /> completes.</param>
      <typeparam name="TResult">The type of the result produced by the antecedent <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. When the task
             completes successfully, the <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will return
             the result of the antecedent <paramref name="task" />.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="cleanupAction" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Finally``1(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task})">
      <summary>
             Execute a cleanup continuation task when a task completes, regardless of the final
             <see cref="P:System.Threading.Tasks.Task.Status" /> of the antecedent task. If the cleanup action completes
             successfully, the status of the antecedent is directly applied to the task returned by
             this method. Otherwise, the status of the faulted or canceled cleanup operation is
             directly applied to the task returned by this method.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="cleanupFunction">The continuation function to execute when <paramref name="task" /> completes. The continuation function returns a <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous cleanup operation.</param>
      <typeparam name="TResult">The type of the result produced by the antecedent <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. When the task
             completes successfully, the <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will return
             the result of the antecedent <paramref name="task" />.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="cleanupFunction" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Select(System.Threading.Tasks.Task,System.Action{System.Threading.Tasks.Task})">
      <summary>
             Synchronously execute a continuation when a task completes successfully.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="continuationAction">The continuation action to execute when <paramref name="task" /> completes successfully.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="continuationAction" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Select(System.Threading.Tasks.Task,System.Action{System.Threading.Tasks.Task},System.Boolean)">
      <summary>
             Synchronously execute a continuation when a task completes. The <paramref name="supportsErrors" />
             parameter specifies whether the continuation is executed if the antecedent task is faulted.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="continuationAction">The continuation action to execute when <paramref name="task" /> completes.</param>
      <param name="supportsErrors">
        <see langword="true" /> if the <paramref name="continuationAction" /> properly handles a faulted antecedent task; otherwise, <see langword="false" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="continuationAction" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Select``1(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task,``0})">
      <summary>
             Synchronously execute a continuation when a task completes successfully.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="continuationFunction">The continuation function to execute when <paramref name="task" /> completes successfully.</param>
      <typeparam name="TResult">The type of the result produced by the continuation <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. When the task completes successfully,
             the <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will contain the result returned from the <paramref name="continuationFunction" />.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="continuationFunction" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Select``1(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task,``0},System.Boolean)">
      <summary>
             Synchronously execute a continuation when a task completes. The <paramref name="supportsErrors" />
             parameter specifies whether the continuation is executed if the antecedent task is faulted.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="continuationFunction">The continuation function to execute when <paramref name="task" /> completes.</param>
      <param name="supportsErrors">
        <see langword="true" /> if the <paramref name="continuationFunction" /> properly handles a faulted antecedent task; otherwise, <see langword="false" />.</param>
      <typeparam name="TResult">The type of the result produced by the continuation <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. When the task completes successfully,
             the <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will contain the result returned from the <paramref name="continuationFunction" />.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="continuationFunction" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Select``1(System.Threading.Tasks.Task{``0},System.Action{System.Threading.Tasks.Task{``0}})">
      <summary>
             Synchronously execute a continuation when a task completes successfully.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="continuationAction">The continuation action to execute when <paramref name="task" /> completes successfully.</param>
      <typeparam name="TSource">The type of the result produced by the antecedent <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="continuationAction" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Select``1(System.Threading.Tasks.Task{``0},System.Action{System.Threading.Tasks.Task{``0}},System.Boolean)">
      <summary>
             Synchronously execute a continuation when a task completes. The <paramref name="supportsErrors" />
             parameter specifies whether the continuation is executed if the antecedent task is faulted.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="continuationAction">The continuation action to execute when <paramref name="task" /> completes.</param>
      <param name="supportsErrors">
        <see langword="true" /> if the <paramref name="continuationAction" /> properly handles a faulted antecedent task; otherwise, <see langword="false" />.</param>
      <typeparam name="TSource">The type of the result produced by the antecedent <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="continuationAction" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Select``2(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.Task{``0},``1})">
      <summary>
             Synchronously execute a continuation when a task completes successfully.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="continuationFunction">The continuation function to execute when <paramref name="task" /> completes successfully.</param>
      <typeparam name="TSource">The type of the result produced by the antecedent <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <typeparam name="TResult">The type of the result produced by the continuation <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. When the task completes successfully,
             the <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will contain the result returned from the <paramref name="continuationFunction" />.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="continuationFunction" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Select``2(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.Task{``0},``1},System.Boolean)">
      <summary>
             Synchronously execute a continuation when a task completes. The <paramref name="supportsErrors" />
             parameter specifies whether the continuation is executed if the antecedent task is faulted.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="continuationFunction">The continuation function to execute when <paramref name="task" /> completes.</param>
      <param name="supportsErrors">
        <see langword="true" /> if the <paramref name="continuationFunction" /> properly handles a faulted antecedent task; otherwise, <see langword="false" />.</param>
      <typeparam name="TSource">The type of the result produced by the antecedent <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <typeparam name="TResult">The type of the result produced by the continuation <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. When the task completes successfully,
             the <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will contain the result returned from the <paramref name="continuationFunction" />.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="continuationFunction" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Then``1(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task,System.Threading.Tasks.Task{``0}})">
      <summary>
             Execute a continuation task when a task completes successfully. The continuation
             task is synchronously created by a continuation function, and then unwrapped to
             form the result of this method.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="continuationFunction">The continuation function to execute when <paramref name="task" /> completes successfully. The continuation function returns a <see cref="T:System.Threading.Tasks.Task`1" /> which provides the final result of the continuation.</param>
      <typeparam name="TResult">The type of the result produced by the continuation <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. When the task completes successfully,
             the <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will contain the result provided by the
             <see cref="P:System.Threading.Tasks.Task`1.Result" /> property of the task returned from <paramref name="continuationFunction" />.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="continuationFunction" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Then``1(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task,System.Threading.Tasks.Task{``0}},System.Boolean)">
      <summary>
             Execute a continuation task when a task completes. The continuation task is synchronously
             created by a continuation function, and then unwrapped to form the result of this method.
             The <paramref name="supportsErrors" /> parameter specifies whether the continuation is
             executed if the antecedent task is faulted.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="continuationFunction">The continuation function to execute when <paramref name="task" /> completes. The continuation function returns a <see cref="T:System.Threading.Tasks.Task`1" /> which provides the final result of the continuation.</param>
      <param name="supportsErrors">
        <see langword="true" /> if the <paramref name="continuationFunction" /> properly handles a faulted antecedent task; otherwise, <see langword="false" />.</param>
      <typeparam name="TResult">The type of the result produced by the continuation <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. When the task completes successfully,
             the <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will contain the result provided by the
             <see cref="P:System.Threading.Tasks.Task`1.Result" /> property of the task returned from <paramref name="continuationFunction" />.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="continuationFunction" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Then(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task,System.Threading.Tasks.Task})">
      <summary>
             Execute a continuation task when a task completes successfully. The continuation
             task is synchronously created by a continuation function, and then unwrapped to
             form the result of this method.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="continuationFunction">The continuation function to execute when <paramref name="task" /> completes successfully. The continuation function returns a <see cref="T:System.Threading.Tasks.Task" /> which provides the final result of the continuation.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the unwrapped asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="continuationFunction" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Then(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task,System.Threading.Tasks.Task},System.Boolean)">
      <summary>
             Execute a continuation task when a task completes. The continuation task is synchronously
             created by a continuation function, and then unwrapped to form the result of this method.
             The <paramref name="supportsErrors" /> parameter specifies whether the continuation is
             executed if the antecedent task is faulted.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="continuationFunction">The continuation function to execute when <paramref name="task" /> completes. The continuation function returns a <see cref="T:System.Threading.Tasks.Task" /> which provides the final result of the continuation.</param>
      <param name="supportsErrors">
        <see langword="true" /> if the <paramref name="continuationFunction" /> properly handles a faulted antecedent task; otherwise, <see langword="false" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the unwrapped asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="continuationFunction" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Then``2(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1}})">
      <summary>
             Execute a continuation task when a task completes successfully. The continuation
             task is synchronously created by a continuation function, and then unwrapped to
             form the result of this method.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="continuationFunction">The continuation function to execute when <paramref name="task" /> completes successfully. The continuation function returns a <see cref="T:System.Threading.Tasks.Task`1" /> which provides the final result of the continuation.</param>
      <typeparam name="TSource">The type of the result produced by the antecedent <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <typeparam name="TResult">The type of the result produced by the continuation <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. When the task completes successfully,
             the <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will contain the result provided by the
             <see cref="P:System.Threading.Tasks.Task`1.Result" /> property of the task returned from <paramref name="continuationFunction" />.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="continuationFunction" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Then``2(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1}},System.Boolean)">
      <summary>
             Execute a continuation task when a task completes. The continuation
             task is synchronously created by a continuation function, and then unwrapped to
             form the result of this method. The <paramref name="supportsErrors" />
             parameter specifies whether the continuation is executed if the antecedent task is faulted.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="continuationFunction">The continuation function to execute when <paramref name="task" /> completes. The continuation function returns a <see cref="T:System.Threading.Tasks.Task`1" /> which provides the final result of the continuation.</param>
      <param name="supportsErrors">
        <see langword="true" /> if the <paramref name="continuationFunction" /> properly handles a faulted antecedent task; otherwise, <see langword="false" />.</param>
      <typeparam name="TSource">The type of the result produced by the antecedent <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <typeparam name="TResult">The type of the result produced by the continuation <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. When the task completes successfully,
             the <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will contain the result provided by the
             <see cref="P:System.Threading.Tasks.Task`1.Result" /> property of the task returned from <paramref name="continuationFunction" />.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="continuationFunction" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Then``1(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task})">
      <summary>
             Execute a continuation task when a task completes successfully. The continuation
             task is synchronously created by a continuation function, and then unwrapped to
             form the result of this method.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="continuationFunction">The continuation function to execute when <paramref name="task" /> completes successfully. The continuation function returns a <see cref="T:System.Threading.Tasks.Task" /> which provides the final result of the continuation.</param>
      <typeparam name="TSource">The type of the result produced by the antecedent <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the unwrapped asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="continuationFunction" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.CoreTaskExtensions.Then``1(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task},System.Boolean)">
      <summary>
             Execute a continuation task when a task completes. The continuation
             task is synchronously created by a continuation function, and then unwrapped to
             form the result of this method. The <paramref name="supportsErrors" />
             parameter specifies whether the continuation is executed if the antecedent task is faulted.
             </summary>
      <param name="task">The antecedent task.</param>
      <param name="continuationFunction">The continuation function to execute when <paramref name="task" /> completes. The continuation function returns a <see cref="T:System.Threading.Tasks.Task" /> which provides the final result of the continuation.</param>
      <param name="supportsErrors">
        <see langword="true" /> if the <paramref name="continuationFunction" /> properly handles a faulted antecedent task; otherwise, <see langword="false" />.</param>
      <typeparam name="TSource">The type of the result produced by the antecedent <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the unwrapped asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="task" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="continuationFunction" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="T:Rackspace.Threading.DelayedTask">
      <summary>
            This class provides methods for creating <see cref="T:System.Threading.Tasks.Task" /> instances that represent delays
            of a fixed duration or operations to wait on one or more other tasks to complete.
            </summary>
    </member>
    <member name="M:Rackspace.Threading.DelayedTask.Delay(System.TimeSpan)">
      <summary>
            Creates a task that will complete after a time delay.
            </summary>
      <param name="delay">The time span to wait before completing the returned task</param>
      <returns>A task that represents the time delay</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="delay" /> represents a negative time interval.</exception>
    </member>
    <member name="M:Rackspace.Threading.DelayedTask.Delay(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>
            Creates a task that will complete after a time delay.
            </summary>
      <param name="delay">The time span to wait before completing the returned task</param>
      <param name="cancellationToken">The cancellation token that will be checked prior to completing the returned task</param>
      <returns>A task that represents the time delay</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="delay" /> represents a negative time interval.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">If the task has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">If the provided <paramref name="cancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:Rackspace.Threading.DelayedTask.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
      <summary>
             Creates a task that will complete when all of the supplied tasks have completed.
             </summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <typeparam name="TResult">The type of the completed task.</typeparam>
      <returns>A task that represents the completion of all of the supplied tasks.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="tasks" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">If <paramref name="tasks" /> contains any <see langword="null" /> values.</exception>
    </member>
    <member name="M:Rackspace.Threading.DelayedTask.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
      <summary>
             Creates a task that will complete when all of the supplied tasks have completed.
             </summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <returns>A task that represents the completion of all of the supplied tasks.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="tasks" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">If <paramref name="tasks" /> contains any <see langword="null" /> values.</exception>
    </member>
    <member name="M:Rackspace.Threading.DelayedTask.WhenAll(System.Threading.Tasks.Task[])">
      <summary>
             Creates a task that will complete when all of the supplied tasks have completed.
             </summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <returns>A task that represents the completion of all of the supplied tasks.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="tasks" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">If <paramref name="tasks" /> contains any <see langword="null" /> values.</exception>
    </member>
    <member name="M:Rackspace.Threading.DelayedTask.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
      <summary>
             Creates a task that will complete when all of the supplied tasks have completed.
             </summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <typeparam name="TResult">The type of the completed task.</typeparam>
      <returns>A task that represents the completion of all of the supplied tasks.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="tasks" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">If <paramref name="tasks" /> contains any <see langword="null" /> values.</exception>
    </member>
    <member name="M:Rackspace.Threading.DelayedTask.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
      <summary>
            Creates a task that will complete when any of the supplied tasks have completed.
            </summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <typeparam name="TResult">The type of the completed task.</typeparam>
      <returns>A task that represents the completion of one of the supplied tasks. The return task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> is the task that completed.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="tasks" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
            If <paramref name="tasks" /> contains any <see langword="null" /> values.
            <para>-or-</para><para>If <paramref name="tasks" /> was empty.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.DelayedTask.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
      <summary>
            Creates a task that will complete when any of the supplied tasks have completed.
            </summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <returns>A task that represents the completion of one of the supplied tasks. The return task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> is the task that completed.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="tasks" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
            If <paramref name="tasks" /> contains any <see langword="null" /> values.
            <para>-or-</para><para>If <paramref name="tasks" /> was empty.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.DelayedTask.WhenAny(System.Threading.Tasks.Task[])">
      <summary>
            Creates a task that will complete when any of the supplied tasks have completed.
            </summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <returns>A task that represents the completion of one of the supplied tasks. The return task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> is the task that completed.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="tasks" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
            If <paramref name="tasks" /> contains any <see langword="null" /> values.
            <para>-or-</para><para>If <paramref name="tasks" /> was empty.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.DelayedTask.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
      <summary>
            Creates a task that will complete when any of the supplied tasks have completed.
            </summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <typeparam name="TResult">The type of the completed task.</typeparam>
      <returns>A task that represents the completion of one of the supplied tasks. The return task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> is the task that completed.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="tasks" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
            If <paramref name="tasks" /> contains any <see langword="null" /> values.
            <para>-or-</para><para>If <paramref name="tasks" /> was empty.</para></exception>
    </member>
    <member name="T:Rackspace.Threading.IAsyncDisposable">
      <summary>
            Provides a mechanism for asynchronously releasing unmanaged resources.
            </summary>
    </member>
    <member name="M:Rackspace.Threading.IAsyncDisposable.DisposeAsync">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
    </member>
    <member name="T:Rackspace.Threading.IProgress`1">
      <summary>
            Defines a provider for progress updates.
            </summary>
      <typeparam name="T">The type of progress update value.</typeparam>
    </member>
    <member name="M:Rackspace.Threading.IProgress`1.Report(`0)">
      <summary>
            Reports a progress update.
            </summary>
      <param name="value">The value of the updated progress.</param>
    </member>
    <member name="T:Rackspace.Threading.Progress`1">
      <summary>
            Provides an <see cref="T:Rackspace.Threading.IProgress`1" /> that invokes callbacks for each reported progress value.
            </summary>
      <typeparam name="T">Specifies the type of the progress report value.</typeparam>
    </member>
    <member name="M:Rackspace.Threading.Progress`1.#ctor">
      <summary>
            Initializes the <see cref="T:Rackspace.Threading.Progress`1" /> object.
            </summary>
    </member>
    <member name="M:Rackspace.Threading.Progress`1.#ctor(System.Action{`0})">
      <summary>
            Initializes the <see cref="T:Rackspace.Threading.Progress`1" /> object with the specified callback.
            </summary>
      <param name="handler">
            A handler to invoke for each reported progress value. This handler will be invoked in addition
            to any delegates registered with the <see cref="E:Rackspace.Threading.Progress`1.ProgressChanged" /> event. Depending on the
            <see cref="T:System.Threading.SynchronizationContext" /> instance captured by the <see cref="T:Rackspace.Threading.Progress`1" /> at
            construction, it is possible that this handler instance could be invoked concurrently with
            itself.
            </param>
    </member>
    <member name="M:Rackspace.Threading.Progress`1.OnReport(`0)">
      <summary>
            Reports a progress change.
            </summary>
      <param name="value">The value of the updated progress.</param>
    </member>
    <member name="E:Rackspace.Threading.Progress`1.ProgressChanged">
      <summary>
            Raised for each reported progress value.
            </summary>
    </member>
    <member name="M:Rackspace.Threading.Progress`1.Rackspace#Threading#IProgress{T}#Report(`0)">
      <summary>
            Reports a progress update.
            </summary>
      <param name="value">The value of the updated progress.</param>
    </member>
    <member name="T:Rackspace.Threading.ProgressChangedEventArgs`1">
      <summary>
            This class contains information for the <see cref="E:Rackspace.Threading.Progress`1.ProgressChanged" /> event.
            </summary>
      <typeparam name="T">The type representing the progress indicator.</typeparam>
    </member>
    <member name="M:Rackspace.Threading.ProgressChangedEventArgs`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Rackspace.Threading.ProgressChangedEventArgs`1" /> class
            with the specified progress.
            </summary>
      <param name="progress">An instance of <typeparamref name="T" /> representing the current progress.</param>
    </member>
    <member name="P:Rackspace.Threading.ProgressChangedEventArgs`1.Progress">
      <summary>
            Gets the current progress.
            </summary>
    </member>
    <member name="T:Rackspace.Threading.StreamExtensions">
      <summary>
            Provides extension methods for the <see cref="T:System.IO.Stream" /> class.
            </summary>
    </member>
    <member name="M:Rackspace.Threading.StreamExtensions.CopyToAsync(System.IO.Stream,System.IO.Stream)">
      <summary>
            Asynchronously reads the bytes from a source stream and writes them to a destination stream.
            </summary>
      <param name="stream">The source stream.</param>
      <param name="destination">The stream to which the contents of the source stream will be copied.</param>
      <returns>A task that represents the asynchronous copy operation.</returns>
      <exception cref="T:System.ArgumentNullException">
            If <paramref name="stream" /> is <see langword="null" />.
            <para>-or-</para><para>If <paramref name="destination" /> is <see langword="null" />.</para></exception>
      <exception cref="T:System.ObjectDisposedException">
            If <paramref name="stream" /> is disposed.
            <para>-or-</para><para>If <paramref name="destination" /> is disposed.</para></exception>
      <exception cref="T:System.NotSupportedException">
            If <paramref name="stream" /> does not support reading.
            <para>-or-</para><para>If <paramref name="destination" /> does not support writing.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.StreamExtensions.CopyToAsync(System.IO.Stream,System.IO.Stream,System.Int32)">
      <summary>
            Asynchronously reads the bytes from a source stream and writes them to a destination stream,
            using a specified buffer size.
            </summary>
      <param name="stream">The source stream.</param>
      <param name="destination">The stream to which the contents of the source stream will be copied.</param>
      <param name="bufferSize">The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.</param>
      <returns>A task that represents the asynchronous copy operation.</returns>
      <exception cref="T:System.ArgumentNullException">
            If <paramref name="stream" /> is <see langword="null" />.
            <para>-or-</para><para>If <paramref name="destination" /> is <see langword="null" />.</para></exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="bufferSize" /> is negative or zero.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            If <paramref name="stream" /> is disposed.
            <para>-or-</para><para>If <paramref name="destination" /> is disposed.</para></exception>
      <exception cref="T:System.NotSupportedException">
            If <paramref name="stream" /> does not support reading.
            <para>-or-</para><para>If <paramref name="destination" /> does not support writing.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.StreamExtensions.CopyToAsync(System.IO.Stream,System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
      <summary>
            Asynchronously reads the bytes from a source stream and writes them to a destination stream,
            using a specified buffer size and cancellation token.
            </summary>
      <param name="stream">The source stream.</param>
      <param name="destination">The stream to which the contents of the source stream will be copied.</param>
      <param name="bufferSize">The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A task that represents the asynchronous copy operation.</returns>
      <exception cref="T:System.ArgumentNullException">
            If <paramref name="stream" /> is <see langword="null" />.
            <para>-or-</para><para>If <paramref name="destination" /> is <see langword="null" />.</para></exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="bufferSize" /> is negative or zero.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            If <paramref name="stream" /> is disposed.
            <para>-or-</para><para>If <paramref name="destination" /> is disposed.</para></exception>
      <exception cref="T:System.NotSupportedException">
            If <paramref name="stream" /> does not support reading.
            <para>-or-</para><para>If <paramref name="destination" /> does not support writing.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.StreamExtensions.FlushAsync(System.IO.Stream)">
      <summary>
            Asynchronously clears all buffers for a stream and causes any buffered data to be written to the underlying device.
            </summary>
      <param name="stream">The stream to flush.</param>
      <returns>A task that represents the asynchronous flush operation.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="stream" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">If <paramref name="stream" /> has been disposed.</exception>
    </member>
    <member name="M:Rackspace.Threading.StreamExtensions.FlushAsync(System.IO.Stream,System.Threading.CancellationToken)">
      <summary>
            Asynchronously clears all buffers for a stream and causes any buffered data to be written to the underlying device,
            and monitors cancellation requests.
            </summary>
      <param name="stream">The stream to flush.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A task that represents the asynchronous flush operation.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="stream" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">If <paramref name="stream" /> has been disposed.</exception>
    </member>
    <member name="M:Rackspace.Threading.StreamExtensions.ReadAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Asynchronously reads a sequence of bytes from a stream and advances the position within the stream by the number of bytes read.
            </summary>
      <param name="stream">The stream to read data from.</param>
      <param name="buffer">The buffer to write the data into.</param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin writing data from the stream.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <returns>
            A task that represents the asynchronous read operation. When the task completes successfully, the <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if
            the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            If <paramref name="stream" /> is <see langword="null" />.
            <para>-or-</para><para>If <paramref name="buffer" /> is <see langword="null" />.</para></exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="offset" /> is negative.
            <para>-or-</para><para>If <paramref name="count" /> is negative.</para></exception>
      <exception cref="T:System.ArgumentException">
            If the sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.
            </exception>
      <exception cref="T:System.NotSupportedException">If <paramref name="stream" /> does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">If <paramref name="stream" /> has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">If <paramref name="stream" /> is currently in use by a previous read operation.</exception>
    </member>
    <member name="M:Rackspace.Threading.StreamExtensions.ReadAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>
            Asynchronously reads a sequence of bytes from a stream, advances the position within the stream by the number of bytes read,
            and monitors cancellation requests.
            </summary>
      <param name="stream">The stream to read data from.</param>
      <param name="buffer">The buffer to write the data into.</param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin writing data from the stream.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>
            A task that represents the asynchronous read operation. When the task completes successfully, the <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if
            the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            If <paramref name="stream" /> is <see langword="null" />.
            <para>-or-</para><para>If <paramref name="buffer" /> is <see langword="null" />.</para></exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="offset" /> is negative.
            <para>-or-</para><para>If <paramref name="count" /> is negative.</para></exception>
      <exception cref="T:System.ArgumentException">
            If the sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.
            </exception>
      <exception cref="T:System.NotSupportedException">If <paramref name="stream" /> does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">If <paramref name="stream" /> has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">If <paramref name="stream" /> is currently in use by a previous read operation.</exception>
    </member>
    <member name="M:Rackspace.Threading.StreamExtensions.WriteAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Asynchronously writes a sequence of bytes to a stream and advances the position within the stream by the number of bytes written.
            </summary>
      <param name="stream">The stream to write data to.</param>
      <param name="buffer">The buffer to read the data from.</param>
      <param name="offset">The zero-based byte offset in buffer from which to begin copying bytes to the stream.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <returns>
            A task that represents the asynchronous write operation.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            If <paramref name="stream" /> is <see langword="null" />.
            <para>-or-</para><para>If <paramref name="buffer" /> is <see langword="null" />.</para></exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="offset" /> is negative.
            <para>-or-</para><para>If <paramref name="count" /> is negative.</para></exception>
      <exception cref="T:System.ArgumentException">
            If the sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.
            </exception>
      <exception cref="T:System.NotSupportedException">If <paramref name="stream" /> does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">If <paramref name="stream" /> has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">If <paramref name="stream" /> is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:Rackspace.Threading.StreamExtensions.WriteAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a sequence of bytes to a stream, advances the position within the stream by the number of bytes written,
            and monitors cancellation requests.
            </summary>
      <param name="stream">The stream to write data to.</param>
      <param name="buffer">The buffer to read the data from.</param>
      <param name="offset">The zero-based byte offset in buffer from which to begin copying bytes to the stream.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>
            A task that represents the asynchronous write operation.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            If <paramref name="stream" /> is <see langword="null" />.
            <para>-or-</para><para>If <paramref name="buffer" /> is <see langword="null" />.</para></exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="offset" /> is negative.
            <para>-or-</para><para>If <paramref name="count" /> is negative.</para></exception>
      <exception cref="T:System.ArgumentException">
            If the sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.
            </exception>
      <exception cref="T:System.NotSupportedException">If <paramref name="stream" /> does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">If <paramref name="stream" /> has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">If <paramref name="stream" /> is currently in use by a previous write operation.</exception>
    </member>
    <member name="T:Rackspace.Threading.TaskBlocks">
      <summary>
            Provides methods for creating tasks which emulate the behavior of <see langword="async/await" />
            without requiring the use of those keywords.
            </summary>
    </member>
    <member name="M:Rackspace.Threading.TaskBlocks.Using``2(System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1}})">
      <summary>
             Provides support for resource cleanup in asynchronous code where the <see langword="async/await" />
             keywords are not available.
             </summary>
      <param name="resource">A function which acquires the resource used during the execution of the task.</param>
      <param name="body">The continuation function which provides the <see cref="T:System.Threading.Tasks.Task`1" /> which acts as the body of the <c>using</c> block.</param>
      <typeparam name="TResource">The type of resource used within the task and disposed of afterwards.</typeparam>
      <typeparam name="TResult">The type of the result produced by the continuation <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. When the task completes successfully,
             the <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will contain the result provided by the
             <see cref="P:System.Threading.Tasks.Task`1.Result" /> property of the task returned from <paramref name="body" />.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="resource" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="body" /> is <see langword="null" />.</para></exception>
      <exception cref="T:System.InvalidOperationException">
             If <paramref name="resource" /> returns <see langword="null" />.
             </exception>
    </member>
    <member name="M:Rackspace.Threading.TaskBlocks.Using``1(System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task})">
      <summary>
             Provides support for resource cleanup in asynchronous code where the <see langword="async/await" />
             keywords are not available.
             </summary>
      <param name="resource">A function which acquires the resource used during the execution of the task.</param>
      <param name="body">The continuation function which provides the <see cref="T:System.Threading.Tasks.Task" /> which acts as the body of the <c>using</c> block.</param>
      <typeparam name="TResource">The type of resource used within the task and disposed of afterwards.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="resource" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="body" /> is <see langword="null" />.</para></exception>
      <exception cref="T:System.InvalidOperationException">
             If <paramref name="resource" /> returns <see langword="null" />.
             </exception>
    </member>
    <member name="M:Rackspace.Threading.TaskBlocks.While(System.Func{System.Boolean},System.Func{System.Threading.Tasks.Task})">
      <summary>
             Provides support for a conditional "while" loop in asynchronous code, without requiring the use of <see langword="async/await" />.
             </summary>
      <param name="condition">A function which evaluates the condition of the asynchronous <c>while</c> loop.</param>
      <param name="body">A function which returns a <see cref="T:System.Threading.Tasks.Task" /> representing one iteration of the body of the <c>while</c> loop.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="condition" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="body" /> is <see langword="null" />.</para></exception>
      <exception cref="T:System.InvalidOperationException">
             If <paramref name="body" /> returns <see langword="null" />.
             </exception>
    </member>
    <member name="M:Rackspace.Threading.TaskBlocks.While(System.Func{System.Threading.Tasks.Task{System.Boolean}},System.Func{System.Threading.Tasks.Task})">
      <summary>
             Provides support for a conditional "while" loop in asynchronous code, without requiring the use of <see langword="async/await" />.
             </summary>
      <param name="condition">A function which returns a <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous evaluation of the <c>while</c> condition.</param>
      <param name="body">A function which returns a <see cref="T:System.Threading.Tasks.Task" /> representing one iteration of the body of the <c>while</c> loop.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
             If <paramref name="condition" /> is <see langword="null" />.
             <para>-or-</para><para>If <paramref name="body" /> is <see langword="null" />.</para></exception>
      <exception cref="T:System.InvalidOperationException">
             If <paramref name="condition" /> returns <see langword="null" />.
             <para>-or-</para><para>If <paramref name="body" /> returns <see langword="null" />.</para></exception>
    </member>
    <member name="T:Rackspace.Threading.TaskCompletionSourceExtensions">
      <summary>Extension methods for <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</summary>
    </member>
    <member name="M:Rackspace.Threading.TaskCompletionSourceExtensions.SetFromFailedTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task)">
      <summary>Transfers the result of a canceled or faulted <see cref="T:System.Threading.Tasks.Task" /> to the <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</summary>
      <param name="taskCompletionSource">The TaskCompletionSource.</param>
      <param name="task">The task whose completion results should be transferred.</param>
      <typeparam name="TResult">Specifies the type of the result.</typeparam>
    </member>
    <member name="M:Rackspace.Threading.TaskCompletionSourceExtensions.SetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task,``0)">
      <summary>
            Transfers the result of a <see cref="T:System.Threading.Tasks.Task`1" /> to a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />,
            using a specified result value when the task is in the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />
            state.
            </summary>
      <param name="taskCompletionSource">The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> instance.</param>
      <param name="task">The result task whose completion results should be transferred.</param>
      <param name="result">The result of the completion source when the specified task completed successfully.</param>
      <typeparam name="TResult">Specifies the result type of the <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
            If <paramref name="taskCompletionSource" /> is <see langword="null" />.
            <para>-or-</para><para>If <paramref name="task" /> is <see langword="null" />.</para></exception>
      <exception cref="T:System.ObjectDisposedException">
            If the underlying <see cref="T:System.Threading.Tasks.Task`1" /> of <paramref name="taskCompletionSource" /> was disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            If the underlying <see cref="T:System.Threading.Tasks.Task`1" /> produced by <paramref name="taskCompletionSource" /> is already
            in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.
            </exception>
    </member>
    <member name="M:Rackspace.Threading.TaskCompletionSourceExtensions.SetFromTask``2(System.Threading.Tasks.TaskCompletionSource{``1},System.Threading.Tasks.Task{``0})">
      <summary>Transfers the result of a <see cref="T:System.Threading.Tasks.Task`1" /> to a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</summary>
      <param name="taskCompletionSource">The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> instance.</param>
      <param name="task">The result task whose completion results should be transferred.</param>
      <typeparam name="TSource">Specifies the result type of the source <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <typeparam name="TResult">Specifies the result type of the <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
            If <paramref name="taskCompletionSource" /> is <see langword="null" />.
            <para>-or-</para><para>If <paramref name="task" /> is <see langword="null" />.</para></exception>
      <exception cref="T:System.ObjectDisposedException">
            If the underlying <see cref="T:System.Threading.Tasks.Task`1" /> of <paramref name="taskCompletionSource" /> was disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            If the underlying <see cref="T:System.Threading.Tasks.Task`1" /> produced by <paramref name="taskCompletionSource" /> is already
            in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.
            </exception>
    </member>
    <member name="M:Rackspace.Threading.TaskCompletionSourceExtensions.TrySetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task,``0)">
      <summary>
            Attempts to transfer the result of a <see cref="T:System.Threading.Tasks.Task`1" /> to a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />,
            using a specified result value when the task is in the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />
            state.
            </summary>
      <param name="taskCompletionSource">The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> instance.</param>
      <param name="task">The result task whose completion results should be transferred.</param>
      <param name="result">The result of the completion source when the specified task completed successfully.</param>
      <typeparam name="TResult">Specifies the result type of the <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</typeparam>
      <returns>
        <see langword="true" /> if the operation was successful.
            <para>-or-</para><para><see langword="false" /> if the operation was unsuccessful or the object has already been disposed.</para></returns>
      <exception cref="T:System.ArgumentNullException">
            If <paramref name="taskCompletionSource" /> is <see langword="null" />.
            <para>-or-</para><para>If <paramref name="task" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.TaskCompletionSourceExtensions.TrySetFromTask``2(System.Threading.Tasks.TaskCompletionSource{``1},System.Threading.Tasks.Task{``0})">
      <summary>Attempts to transfer the result of a <see cref="T:System.Threading.Tasks.Task`1" /> to a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</summary>
      <param name="taskCompletionSource">The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> instance.</param>
      <param name="task">The result task whose completion results should be transferred.</param>
      <typeparam name="TSource">Specifies the result type of the source <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <typeparam name="TResult">Specifies the result type of the <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</typeparam>
      <returns>
        <see langword="true" /> if the operation was successful.
            <para>-or-</para><para><see langword="false" /> if the operation was unsuccessful or the object has already been disposed.</para></returns>
      <exception cref="T:System.ArgumentNullException">
            If <paramref name="taskCompletionSource" /> is <see langword="null" />.
            <para>-or-</para><para>If <paramref name="task" /> is <see langword="null" />.</para></exception>
    </member>
    <member name="T:Rackspace.Threading.WebRequestExtensions">
      <summary>
            Provides extension methods for asynchronous operations on
            <see cref="T:System.Net.WebRequest" /> objects.
            </summary>
    </member>
    <member name="M:Rackspace.Threading.WebRequestExtensions.GetRequestStreamAsync(System.Net.WebRequest)">
      <summary>
            Returns a <see cref="T:System.IO.Stream" /> for writing data to the Internet resource as an asynchronous operation.
            </summary>
      <param name="request">The request.</param>
      <returns>This operation will not block. The returned <see cref="T:System.Threading.Tasks.Task`1" /> object will complete when the <see cref="T:System.IO.Stream" /> for writing data to the Internet resource is available.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="request" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Rackspace.Threading.WebRequestExtensions.GetResponseAsync(System.Net.WebRequest)">
      <summary>
            Returns a response to an Internet request as an asynchronous operation.
            </summary>
      <param name="request">The request.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> object which represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="request" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Rackspace.Threading.WebRequestExtensions.GetResponseAsync(System.Net.WebRequest,System.Boolean,System.Threading.CancellationToken)">
      <summary>
            Returns a response to an Internet request as an asynchronous operation.
            </summary>
      <param name="request">The request.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw a <see cref="T:System.Net.WebException" /> if the <see cref="P:System.Net.HttpWebResponse.StatusCode" /> of the response is greater than 400; otherwise, <see langword="false" /> to return the <see cref="T:System.Net.WebResponse" /> in the result for these cases.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> object which represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="request" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Net.WebException">
            If <see cref="M:System.Net.WebRequest.Abort" /> was previously called.
            <para>-or-</para><para>If the timeout period for the request expired.</para><para>-or-</para><para>If an error occurred while processing the request.</para></exception>
    </member>
    <member name="M:Rackspace.Threading.WebRequestExtensions.GetResponseAsync(System.Net.WebRequest,System.Threading.CancellationToken)">
      <summary>
            Returns a response to an Internet request as an asynchronous operation.
            </summary>
      <param name="request">The request.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> object which represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="request" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Net.WebException">
            If <see cref="M:System.Net.WebRequest.Abort" /> was previously called.
            <para>-or-</para><para>If the timeout period for the request expired.</para><para>-or-</para><para>If an error occurred while processing the request.</para></exception>
    </member>
  </members>
</doc>